// Mocks generated by Mockito 5.4.4 from annotations
// in task_sense/test/features/sensor_tracker/data/repositories/sensor_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sensors_plus/src/sensors.dart' as _i2;
import 'package:sensors_plus_platform_interface/sensors_plus_platform_interface.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Sensors].
///
/// See the documentation for Mockito's code generation for more information.
class MockSensors extends _i1.Mock implements _i2.Sensors {
  @override
  _i3.Stream<_i4.AccelerometerEvent> get accelerometerEvents =>
      (super.noSuchMethod(
        Invocation.getter(#accelerometerEvents),
        returnValue: _i3.Stream<_i4.AccelerometerEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.AccelerometerEvent>.empty(),
      ) as _i3.Stream<_i4.AccelerometerEvent>);

  @override
  _i3.Stream<_i4.GyroscopeEvent> get gyroscopeEvents => (super.noSuchMethod(
        Invocation.getter(#gyroscopeEvents),
        returnValue: _i3.Stream<_i4.GyroscopeEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.GyroscopeEvent>.empty(),
      ) as _i3.Stream<_i4.GyroscopeEvent>);

  @override
  _i3.Stream<_i4.UserAccelerometerEvent> get userAccelerometerEvents =>
      (super.noSuchMethod(
        Invocation.getter(#userAccelerometerEvents),
        returnValue: _i3.Stream<_i4.UserAccelerometerEvent>.empty(),
        returnValueForMissingStub:
            _i3.Stream<_i4.UserAccelerometerEvent>.empty(),
      ) as _i3.Stream<_i4.UserAccelerometerEvent>);

  @override
  _i3.Stream<_i4.MagnetometerEvent> get magnetometerEvents =>
      (super.noSuchMethod(
        Invocation.getter(#magnetometerEvents),
        returnValue: _i3.Stream<_i4.MagnetometerEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.MagnetometerEvent>.empty(),
      ) as _i3.Stream<_i4.MagnetometerEvent>);

  @override
  _i3.Stream<_i4.AccelerometerEvent> accelerometerEventStream(
          {Duration? samplingPeriod = const Duration(milliseconds: 200)}) =>
      (super.noSuchMethod(
        Invocation.method(
          #accelerometerEventStream,
          [],
          {#samplingPeriod: samplingPeriod},
        ),
        returnValue: _i3.Stream<_i4.AccelerometerEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.AccelerometerEvent>.empty(),
      ) as _i3.Stream<_i4.AccelerometerEvent>);

  @override
  _i3.Stream<_i4.GyroscopeEvent> gyroscopeEventStream(
          {Duration? samplingPeriod = const Duration(milliseconds: 200)}) =>
      (super.noSuchMethod(
        Invocation.method(
          #gyroscopeEventStream,
          [],
          {#samplingPeriod: samplingPeriod},
        ),
        returnValue: _i3.Stream<_i4.GyroscopeEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.GyroscopeEvent>.empty(),
      ) as _i3.Stream<_i4.GyroscopeEvent>);

  @override
  _i3.Stream<_i4.UserAccelerometerEvent> userAccelerometerEventStream(
          {Duration? samplingPeriod = const Duration(milliseconds: 200)}) =>
      (super.noSuchMethod(
        Invocation.method(
          #userAccelerometerEventStream,
          [],
          {#samplingPeriod: samplingPeriod},
        ),
        returnValue: _i3.Stream<_i4.UserAccelerometerEvent>.empty(),
        returnValueForMissingStub:
            _i3.Stream<_i4.UserAccelerometerEvent>.empty(),
      ) as _i3.Stream<_i4.UserAccelerometerEvent>);

  @override
  _i3.Stream<_i4.MagnetometerEvent> magnetometerEventStream(
          {Duration? samplingPeriod = const Duration(milliseconds: 200)}) =>
      (super.noSuchMethod(
        Invocation.method(
          #magnetometerEventStream,
          [],
          {#samplingPeriod: samplingPeriod},
        ),
        returnValue: _i3.Stream<_i4.MagnetometerEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.MagnetometerEvent>.empty(),
      ) as _i3.Stream<_i4.MagnetometerEvent>);

  @override
  _i3.Stream<_i4.BarometerEvent> barometerEventStream(
          {Duration? samplingPeriod = const Duration(milliseconds: 200)}) =>
      (super.noSuchMethod(
        Invocation.method(
          #barometerEventStream,
          [],
          {#samplingPeriod: samplingPeriod},
        ),
        returnValue: _i3.Stream<_i4.BarometerEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.BarometerEvent>.empty(),
      ) as _i3.Stream<_i4.BarometerEvent>);
}
