// Mocks generated by Mockito 5.4.4 from annotations
// in task_sense/test/features/task_management/domain/use_cases/get_task_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_sense/core/error/failures.dart' as _i5;
import 'package:task_sense/features/task_management/data/models/task_list_model.dart'
    as _i6;
import 'package:task_sense/features/task_management/data/models/task_list_with_count_model.dart'
    as _i7;
import 'package:task_sense/features/task_management/domain/repositories/task_list_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskListRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskListRepository extends _i1.Mock
    implements _i3.TaskListRepository {
  MockTaskListRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> insertTaskList(
          _i6.TaskListModel? taskList) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTaskList,
          [taskList],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #insertTaskList,
            [taskList],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.TaskListWithCountModel>>>
      getAllTaskLists() => (super.noSuchMethod(
            Invocation.method(
              #getAllTaskLists,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure,
                        List<_i7.TaskListWithCountModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.TaskListWithCountModel>>(
              this,
              Invocation.method(
                #getAllTaskLists,
                [],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure, List<_i7.TaskListWithCountModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteTaskList(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTaskList,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteTaskList,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
