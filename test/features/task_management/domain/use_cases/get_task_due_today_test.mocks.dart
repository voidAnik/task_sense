// Mocks generated by Mockito 5.4.4 from annotations
// in task_sense/test/features/task_management/domain/use_cases/get_task_due_today_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_sense/core/error/failures.dart' as _i5;
import 'package:task_sense/features/task_management/data/models/task_model.dart'
    as _i6;
import 'package:task_sense/features/task_management/domain/entities/task_count.dart'
    as _i7;
import 'package:task_sense/features/task_management/domain/repositories/task_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> insertTask(_i6.TaskModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #insertTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskModel>>> getAllTasks(
          int? taskListId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [taskListId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.TaskModel>>(
          this,
          Invocation.method(
            #getAllTasks,
            [taskListId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskModel>>> getTodayTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodayTasks,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.TaskModel>>(
          this,
          Invocation.method(
            #getTodayTasks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteTask(
    int? id,
    int? listId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [
            id,
            listId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteTask,
            [
              id,
              listId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.TaskCount>> countTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #countTasks,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.TaskCount>>.value(
            _FakeEither_0<_i5.Failure, _i7.TaskCount>(
          this,
          Invocation.method(
            #countTasks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.TaskCount>>);

  @override
  _i4.Stream<List<_i6.TaskModel>> getTaskStream(int? taskListId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskStream,
          [taskListId],
        ),
        returnValue: _i4.Stream<List<_i6.TaskModel>>.empty(),
      ) as _i4.Stream<List<_i6.TaskModel>>);

  @override
  void closeStream() => super.noSuchMethod(
        Invocation.method(
          #closeStream,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
