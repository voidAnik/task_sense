// Mocks generated by Mockito 5.4.4 from annotations
// in task_sense/test/features/task_management/data/data_sources/task_list_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_sense/core/database/task_list_dao.dart' as _i2;
import 'package:task_sense/features/task_management/data/models/task_list_model.dart'
    as _i4;
import 'package:task_sense/features/task_management/data/models/task_list_with_count_model.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskListDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskListDao extends _i1.Mock implements _i2.TaskListDao {
  MockTaskListDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> insertTaskList(_i4.TaskListModel? taskList) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTaskList,
          [taskList],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<List<_i4.TaskListModel>> getAllTaskLists() => (super.noSuchMethod(
        Invocation.method(
          #getAllTaskLists,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.TaskListModel>>.value(<_i4.TaskListModel>[]),
      ) as _i3.Future<List<_i4.TaskListModel>>);

  @override
  _i3.Future<List<_i5.TaskListWithCountModel>> getTaskListsWithCount() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskListsWithCount,
          [],
        ),
        returnValue: _i3.Future<List<_i5.TaskListWithCountModel>>.value(
            <_i5.TaskListWithCountModel>[]),
      ) as _i3.Future<List<_i5.TaskListWithCountModel>>);

  @override
  _i3.Future<void> updateTaskList(_i4.TaskListModel? taskList) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskList,
          [taskList],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTaskList(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTaskList,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
