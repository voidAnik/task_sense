// Mocks generated by Mockito 5.4.4 from annotations
// in task_sense/test/features/task_management/data/repositories/task_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_sense/features/task_management/data/data_sources/task_local_data_source.dart'
    as _i3;
import 'package:task_sense/features/task_management/data/models/task_model.dart'
    as _i5;
import 'package:task_sense/features/task_management/domain/entities/task_count.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskCount_0 extends _i1.SmartFake implements _i2.TaskCount {
  _FakeTaskCount_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskLocalDataSource extends _i1.Mock
    implements _i3.TaskLocalDataSource {
  @override
  _i4.Future<void> insertTask(_i5.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #insertTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.TaskModel>> getAllTasks(int? taskListId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [taskListId],
        ),
        returnValue: _i4.Future<List<_i5.TaskModel>>.value(<_i5.TaskModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.TaskModel>>.value(<_i5.TaskModel>[]),
      ) as _i4.Future<List<_i5.TaskModel>>);

  @override
  _i4.Future<List<_i5.TaskModel>> getTodayTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTodayTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i5.TaskModel>>.value(<_i5.TaskModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.TaskModel>>.value(<_i5.TaskModel>[]),
      ) as _i4.Future<List<_i5.TaskModel>>);

  @override
  _i4.Future<void> deleteTask(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.TaskCount> countTasks() => (super.noSuchMethod(
        Invocation.method(
          #countTasks,
          [],
        ),
        returnValue: _i4.Future<_i2.TaskCount>.value(_FakeTaskCount_0(
          this,
          Invocation.method(
            #countTasks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.TaskCount>.value(_FakeTaskCount_0(
          this,
          Invocation.method(
            #countTasks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.TaskCount>);
}
